"""2023-01-03_Initial migration

Revision ID: 5169e2e3b38f
Revises: 
Create Date: 2024-01-06 14:24:34.455617

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '5169e2e3b38f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def _get_order_status():
    return postgresql.ENUM('CREATE', 'READ', 'UPDATE'
                           'DELETE', name='permission_code')


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permission',
                    sa.Column('code', sa.Enum('CREATE', 'READ', 'UPDATE',
                              'DELETE', name='permission_code'), nullable=False),
                    sa.Column('resource', sa.String(length=50), nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('role',
                    sa.Column('name', sa.String(length=50), nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_role_name'), 'role', ['name'], unique=False)
    op.create_table('user',
                    sa.Column('firstname', sa.String(
                        length=50), nullable=False),
                    sa.Column('lastname', sa.String(length=50), nullable=False),
                    sa.Column('email', sa.String(length=300), nullable=False),
                    sa.Column('hashed_password', sa.String(
                        length=300), nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('permission_to_role',
                    sa.Column('role_id', sa.Uuid(), nullable=True),
                    sa.Column('permission_id', sa.Uuid(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['permission_id'], ['permission.id'], ),
                    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
                    sa.UniqueConstraint('role_id', 'permission_id')
                    )
    op.create_table('post',
                    sa.Column('name', sa.String(length=150), nullable=False),
                    sa.Column('text', sa.Text(), nullable=False),
                    sa.Column('author_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.ForeignKeyConstraint(['author_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_post_name'), 'post', ['name'], unique=False)
    op.create_table('user_to_role',
                    sa.Column('user_id', sa.Uuid(), nullable=True),
                    sa.Column('role_id', sa.Uuid(), nullable=True),
                    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.UniqueConstraint('user_id', 'role_id')
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_to_role')
    op.drop_index(op.f('ix_post_name'), table_name='post')
    op.drop_table('post')
    op.drop_table('permission_to_role')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_role_name'), table_name='role')
    op.drop_table('role')
    op.drop_table('permission')
    # ### end Alembic commands ###
    _get_order_status().drop(op.get_bind())
